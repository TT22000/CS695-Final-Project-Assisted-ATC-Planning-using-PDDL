(define
(domain atc)
(:requirements :strips :typing :equality :conditional-effects :action-costs)
(:types plane - object)

(:predicates
    (planelanded ?p - plane)
    (goaround ?p - plane)
  )

(:functions
  (counter ?p - plane)
  (reqspeed ?p - plane)
  (distance ?p - plane)
  (speed ?p - plane)
  (altitude ?p - plane)
  (time)
  (counting)
  (counted)
  (maintain)
  (minimums)
  (minimumsplane)
  (minimumsspeed)
  (landed)
  (clearedplane)
  )

(:action reset-counter
    :parameters (?p - plane)
    :precondition(and
    (= (counting) (counted))
    )
    :effect(and
    (assign (counting) 1)
    (increase (time) 1)
    )
)

(:action skip
    :parameters (?p - plane)
    :precondition (and 
    (planelanded ?p)
    (= (counting) (counter ?p))
    )
    :effect (and
    (increase (counting) 1)
    )
)

(:action acceptmin
  :parameters (?p - plane)
  :precondition (and 
    (not (planelanded ?p))
    (= (altitude ?p) (minimums))
    (= (minimumsplane) 0)
    )
    :effect (and
    (assign (minimumsplane) (counter ?p))
    )
)

(:action goaround
  :parameters (?p - plane)
  :precondition (and 
    (not (planelanded ?p))
    (<= (distance ?p) 1000)
    )
    :effect (and
    (assign (distance ?p) 3000)
    )
)

(:action clear-to-land
  :parameters (?p - plane)
  :precondition (and 
    (not (planelanded ?p))
    (<= (distance ?p) 1000)
    )
    :effect (and
    (assign (distance ?p) 3000)
    )
)

(:action land
  :parameters (?p - plane)
  :precondition (and
    (<= (speed ?p) (+ (reqspeed ?p) 80))
    (= (minimumsplane) (counter ?p))
    (<= (distance ?p) 1000)
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
  (planelanded ?p)
  (increase (counting) 1)
  (assign (minimumsplane) 0)
  )
)

(:action flat-travel-no-speed
  :parameters (?p - plane)
  :precondition (and
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)

(:action flat-travel-dec-speed
  :parameters (?p - plane)
  :precondition (and
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (speed ?p) 8)
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)

(:action flat-travel-incc-speed
  :parameters (?p - plane)
  :precondition (and
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (increase (speed ?p) 8)
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)


(:action fast-down-travel-no-speed
  :parameters (?p - plane)
  :precondition (and
    (< (minimums) (- (altitude ?p) 1000))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (altitude ?p) 1000)
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)

(:action fast-down-travel-dec-speed
  :parameters (?p - plane)
  :precondition (and
    (< (minimums) (- (altitude ?p) 1000))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (speed ?p) 25)
    (decrease (altitude ?p) 1000)
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)

(:action fast-down-travel-inc-speed
  :parameters (?p - plane)
  :precondition (and
    (< (minimums) (- (altitude ?p) 1000))
    (not (planelanded ?p))
    )
  :effect (and
    (increase (speed ?p) 25)
    (decrease (altitude ?p) 1000)
    (increase (counting) 1)
    (decrease (distance ?p) (* (speed ?p) 1.7))
    )
)


(:action down-travel-no-speed
  :parameters (?p - plane)
  :precondition (and
    (not (= (altitude ?p) (minimums)))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (altitude ?p) 100)
    (increase (counting) 1)
    (decrease (distance ?p) (speed ?p))
    )
)

(:action down-travel-with-speed
  :parameters (?p - plane)
  :precondition (and
    (not (= (altitude ?p) (minimums)))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (speed ?p) 8)
    (decrease (altitude ?p) 100)
    (increase (counting) 1)
    (decrease (distance ?p) (speed ?p))
    )
)

(:action down-travel-no-speed-minimums
  :parameters (?p - plane)
  :precondition (and
    (= (minimumsplane) (counter ?p))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (altitude ?p) 100)
    (increase (counting) 1)
    (decrease (distance ?p) (speed ?p))
    )
)

(:action down-travel-with-speed-minimums
  :parameters (?p - plane)
  :precondition (and
    (= (minimumsplane) (counter ?p))
    (= (counting) (counter ?p))
    (not (planelanded ?p))
    )
  :effect (and
    (decrease (speed ?p) 8)
    (decrease (altitude ?p) 100)
    (increase (counting) 1)
    (decrease (distance ?p) (speed ?p))
    )
)
)
